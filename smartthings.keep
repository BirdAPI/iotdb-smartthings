/**
 *  smartthings.groovy
 *
 *  David Janes
 *  IOTDB.org
 *  2014-02-1
 *
 *  Allow control and monitoring of your SmartThings
 *  using an API.
 *
 *  A work in progress.
 */

/* --- setup section --- */
/*
 *  The user preferences - SmartThings turns this into an UI.
 *  Make sure that if you change anything related to this in the code
 *  that you update the preferences in your installed app.s
 */
preferences {
    section("Allow IOTDB to Control & Access These Things...") {
        input "switches", "capability.switch", title: "Switches", multiple: true
        input "motion", "capability.motionSensor", title: "Motion", required: false, multiple: true
        input "contact", "capability.contactSensor", title: "Contact", required: false, multiple: true
        input "acceleration", "capability.accelerationSensor", title: "Acceleration", required: false, multiple: true
        input "presence", "capability.presenceSensor", title: "Presence", required: false, multiple: true
    }
}

/*
 *  The API
 *
 *  Not even close to being ready
 */
mappings {
    path("/switches") {
        action: [
            GET: "listSwitches"
        ]
    }
    path("/switches/:id") {
        action: [
            GET: "showSwitch"
        ]
    }
    path("/switches/:id/:command") {
        action: [
            GET: "updateSwitch"
        ]
    }
    path("/locks") {
        action: [
            GET: "listLocks"
        ]
    }
    path("/locks/:id") {
        action: [
            GET: "showLock"
        ]
    }
    path("/locks/:id/:command") {
        action: [
            GET: "updateLock"
        ]
    }    

}

/*
 *  This function is called once when the app is installed
 */
def installed() {
    _event_subscribe()
}

/*
 *  This function is called every time the user changes
 *  their preferences
 */
def updated()
{
    log.debug "updated"
    unsubscribe()
    _event_subscribe()
}

/* --- event section --- */

/*
 *  What events are we interested in. This needs
 *  to be in it's own function because both
 *  updated() and installed() are interested in it.
 */
def _event_subscribe()
{
    subscribe(switches, "switch", "_on_event")
    subscribe(motion, "motion", "_on_event")
    subscribe(contact, "contact", "_on_event")
    subscribe(acceleration, "acceleration", "_on_event")
    subscribe(presence, "presence", "_on_event")
}

/*
 *  This function is called whenever something changes
 */
def _on_event (evt)
{
    log.debug "_on_event deviceId=${evt.deviceId} stringValue=${evt.stringValue}"
}

/*
 *  An example of how to get PushingBox.com to send a message
 */
def _send_pushingbox() {
    log.debug "_send_pushingbox called";

    def devid = "vDBBD18017270A56"
    def messageText = "Hello_World"

    httpGet("http://api.pushingbox.com/pushingbox?devid=${devid}&message=xxx_xxx")
}

/* --- API section --- */

def listSwitches()
{
    switches.collect{device(it,"switch")}
}

def showSwitch()
{
    show(switches, "switch")
}

void updateSwitch()
{
    update(switches)
}

def listLocks()
{
    locks.collect{device(it,"lock")}
}

def showLock() {
    show(locks, "lock")
}

void updateLock() {
    update(locks)
}

def deviceHandler(evt) {}

private void update(devices) {
    log.debug "update, request: params: ${params}, devices: $devices.id"


        //def command = request.JSON?.command
        def command = params.command
        //let's create a toggle option here
        if (command) 
        {

                def device = devices.find { it.id == params.id }
            if (!device) {
                httpError(404, "Device not found")
            } else {
                if(command == "toggle")
                {
                    if(device.currentValue('switch') == "on")
                        device.off();
                    else
                        device.on();
                }
                else
                {
                    device."$command"()
                }
            }
        }
}

private show(devices, type) {
    def device = devices.find { it.id == params.id }
    if (!device) {
        httpError(404, "Device not found")
    }
    else {
        def attributeName = type == "motionSensor" ? "motion" : type
            def s = device.currentState(attributeName)
            [id: device.id, label: device.displayName, value: s?.value, unitTime: s?.date?.time, type: type]
    }
}


private device(it, type) {
    it ? [id: it.id, label: it.label, type: type] : null
}

